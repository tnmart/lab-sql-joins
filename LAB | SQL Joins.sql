-- Write SQL queries to perform the following tasks using the Sakila database:

USE sakila;

-- 1.List the number of films per category.
SELECT
	c.name,
    COUNT(f.film_id) AS number_of_films
FROM sakila.film AS f
JOIN sakila.film_category AS fc
ON f.film_id = fc.film_id
JOIN sakila.category as c
ON fc.category_id = c.category_id
GROUP BY c.name;

-- 2.Retrieve the store ID, city, and country for each store.
SELECT
	s.store_id,
    c.city,
    co.country
FROM store AS s
RIGHT JOIN address AS a
ON s.address_id = a.address_id
JOIN city as c
ON a.city_id = c.city_id
JOIN country AS co
ON c.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT
	s.store_id,
	SUM(p.amount) AS revenue_by_store
FROM payment AS p
JOIN RENTAL AS r
ON p.rental_id = r.rental_id
JOIN inventory AS i
ON r.inventory_id = i.inventory_id
JOIN store AS s
ON s.store_id = i.store_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category.
SELECT
	c.name AS category,
    AVG(f.length) AS "Average Length"
FROM film AS f
JOIN film_category AS fc
ON f.film_id = fc.film_id
JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY category;

-- Bonus:

-- 5.Identify the film categories with the longest average running time.
SELECT
	c.name AS category,
    AVG(f.length) AS average_length
FROM film AS f
JOIN film_category AS fc
ON f.film_id = fc.film_id
JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY category
ORDER BY average_length DESC
LIMIT 5;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT
	f.title AS film,
    COUNT(rental_date) AS number_of_rentals
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY film
ORDER BY number_of_rentals DESC
LIMIT 10;

-- 7.Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT COUNT(i.store_id) AS number_of_copies_in_store_1
FROM inventory as i
JOIN film as f
ON i.film_id = f.film_id
WHERE f.title = "ACADEMY DINOSAUR" AND i.store_id=1;

-- 8. Provide a list of all distinct film titles, along with their availability status in the
-- inventory. Include a column indicating whether each title is 'Available' or 'NOT available.'
-- Note that there are 42 titles that are not in the inventory, and this information can be
-- obtained using a CASE statement combined with IFNULL."

SELECT
	f.title,
	CASE
        WHEN r.return_date IS NULL THEN 'Rented'
        ELSE 'Available'
    END AS availability
FROM film AS f
LEFT JOIN inventory as i
ON i.film_id = f.film_id
LEFT JOIN rental AS r
ON i.inventory_id = r.inventory_id;